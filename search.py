
API_TOKEN = '#'
import re
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
import aiohttp
import asyncio
import phonenumbers
from phonenumbers import carrier, geocoder, timezone
import os
from sqlalchemy import create_engine, MetaData, Table, select, or_
from sqlalchemy.exc import SQLAlchemyError
import logging
# –î–õ–Ø –î–£–®–ò  üìÇüíæüìäüìàüîçüîéüîìüõ†Ô∏èüíªüñ•Ô∏èüì±üìùüóÉÔ∏èüìúüìëüìáüìãüîêüîíüß¨üìåüóÇÔ∏èüìÅ‚öôÔ∏èüìâüí°üõ∞Ô∏èüåêüåçüåèüåéüì°üß©üí•üì£üîäüîîüõ°Ô∏èüß®üï∂Ô∏èüîóüîóüìüüí≥üìä‚öîÔ∏èüß≤üìëüìàüñãÔ∏èüõ†Ô∏èüîçüîêüìãüìãüîçüóùÔ∏èüìúüìàüõ°Ô∏èüìàüîóüìåüñ•Ô∏èüìáüìúüóÉÔ∏èüìçüîçüìâüì±üñ•Ô∏èüìÇüìäüîìüîçüîìüìäüìúüîíüîêüõ°Ô∏è
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

LISTDB = [
    "üîì Moldova Facebook Leaks",
    "üé• –ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä —Ç–∏—Ä–∞—Å–ø–æ–ª—å kinotir.md",
    "üïµÔ∏è –ú–í–î - –ü–æ–∏—Å–∫ –±–µ–∑ –≤–µ—Å—Ç–∏ –ø—Ä–æ–ø–∞–≤—à–∏—Ö 2016",
    "üß≠ –ú–æ–ª–¥–æ–≤–∞ - –ì–∞–≥–∞—É–∑–∏—è - –†–æ–∑—ã—Å–∫ –ø—Ä–æ–ø–∞–≤—à–∏—Ö –±–µ–∑ –≤–µ—Å—Ç–∏ 2017",
    "üîç –ú–æ–ª–¥–æ–≤–∞ - –ì–∞–≥–∞—É–∑–∏—è –†–æ–∑—ã—Å–∫ –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–æ–≤ 2017",
    "üìã –ú–æ–ª–¥–æ–≤–∞ - –ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞—Ç 2017 –ü–æ–∏—Å–∫ –ø—Ä–æ–ø–∞–≤—à–∏—Ö –±–µ–∑ –≤–µ—Å—Ç–∏",
    "üõ°Ô∏è –ú–æ–ª–¥–æ–≤–∞ - –ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞—Ç 2017",
    "üö® –ú–æ–ª–¥–æ–≤–∞ - –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø–æ–≥—Ä–∞–Ω–∏—á–Ω–æ–π –ø–æ–ª–∏—Ü–∏–∏ - –†–æ–∑—ã—Å–∫ –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–æ–≤ 2017",
    "üåç –ú–æ–ª–¥–æ–≤–∞ - –ò–Ω—Ç–µ—Ä–ø–æ–ª - –†–æ–∑—ã—Å–∫ –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–æ–≤ 2017",
    "üèôÔ∏è –ú–æ–ª–¥–æ–≤–∞ - –ö–∏—à–∏–Ω–µ–≤ –ü–æ–∏—Å–∫ –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–æ–≤ 2014",
    "üîí –ú–æ–ª–¥–æ–≤–∞ - –ú–í–† –†–æ–∑—ã—Å–∫ –ü—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–æ–≤ 2014",
    "‚öñÔ∏è –ú–æ–ª–¥–æ–≤–∞ - –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —é—Å—Ç–∏—Ü–∏–∏ - –†–æ–∑—ã—Å–∫ –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–æ–≤ 2017",
    "üìÖ –ú–æ–ª–¥–æ–≤–∞ - –†–æ–∑—ã—Å–∫ –ü—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–æ–≤ 2004",
    "‚ö∞Ô∏è –ü–ú–† - –î—É–±–±–æ—Å–∞—Ä—ã - –ü–æ–≥–∏–±—à–∏–µ –∏ –±–µ–∑ –≤–µ—Å—Ç–∏ –ø—Ä–æ–ø–∞–≤—à–∏–µ 1990-1992",
    "üëÆ‚Äç‚ôÇÔ∏è –ü–ú–† - –ú–í–î - –†–æ–∑—ã—Å–∫ –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–æ–≤",
    "üíº –ü–ú–† - –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –Æ—Å—Ç–∏—Ü–∏–∏ - –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏–π - –ê–ª–∏–º–µ–Ω—Ç—â–∏–∫–∏ –≤ –†–æ–∑—ã—Å–∫–µ 2012",
    "üìú –ü–ú–† - –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –Æ—Å—Ç–∏—Ü–∏–∏ - –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏–π 2017",
    "üóÇÔ∏è –ü–ú–† –†–û–ó–´–°–ö 2017",
    "üìÇ –ü—Ä–∏–¥–Ω–µ—Å—Ç—Ä–æ–≤—å–µ –†–æ–∑—ã—Å–∫ –ú–í–î",
    "üåê George Standard –ö–∏—à–∏–Ω–µ–≤ 2023                      ",
    "üìÅ pmr_users (–∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω)                        ",
    "üìü –í–ª–∞–¥–µ–ª—å—Ü—ã –æ—Ç–µ–ª–µ–π –ú–æ–ª–¥–æ–≤—ã                        ",
    "üß¨ API LEAK OSINT                       ",
    "                       ", #–ü–£–°–¢–£–Æ –û–°–¢–ê–í–¨ –¥–ª—è —ç—Å—Å—Ç–µ—Ç–∏–∫–∏
    "‚ãÜÔΩ°Ôæü‚òÅÔ∏éÔΩ°‚ãÜÔΩ° Ôæü‚òæ ÔæüÔΩ°‚ãÜ –í—Å–µ–≥–æ –°—Ç—Ä–æ–∫: 58027(–ü–ú–†/–ú–î) ",
    "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ - /start                          ",
]

DB_FOLDER_PATH = 'F:\\fordatabase'
API_LEAK_OSINT = "#"  
LEAK_OSINT_URL = "https://leakosintapi.com/"

async def search_leak_osint(query):
    async with aiohttp.ClientSession() as session:
        data = {
            "token": API_LEAK_OSINT,
            "request": query,
            "limit": 100,  
            "lang": "ru",  
            "type": "json"  
        }
        try:
            async with session.post(LEAK_OSINT_URL, json=data) as response:
                if response.status == 200:
                    result = await response.json()
                    if result:
                        return format_osint_results(result)
                    else:
                        return ["‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ Leak OSINT."]
                else:
                    return [f"‚ö† –û—à–∏–±–∫–∞ API Leak OSINT: {response.status}"]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API Leak OSINT: {e}")
            return ["‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API."]


def format_osint_results(results):
    messages = []
    chunk_size = 4000  
    formatted_result = "\n".join([f"üîπ {key}: {value}" for key, value in results.items()])
    
    for i in range(0, len(formatted_result), chunk_size):
        messages.append(formatted_result[i:i+chunk_size])
    
    return messages


def is_phone_number(input_string):
    phone_pattern = re.compile(r"^\+?\d{7,15}$")
    match = phone_pattern.match(input_string)
    logger.debug(f"is_phone_number: {input_string} -> {bool(match)}")
    return match is not None

def is_ip_address(input_string):
    ip_pattern = re.compile(r"^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
    match = ip_pattern.match(input_string)
    logger.debug(f"is_ip_address: {input_string} -> {bool(match)}")
    return match is not None

# —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞–ª–æ –ø–æ—á—Ç—É —Å —é–∑–µ—Ä–Ω–µ–π–º–æ–º, —É–∂–µ –ª–∏—à–Ω–µ–µ —Ç.–∫ –ø–µ—Ä–µ–¥–µ–ª–∞–ª –Ω–∞ –∫–æ–º–∞–Ω–¥—É /user
def is_username(input_string):
    username_check = not any(input_string.lower().endswith(domain) for domain in [
        "@mail.ru", "@gmail.com", "@bk.ru", "@vk.com", "@inbox.ru", "@list.ru", "@internet.ru", "@rambler.ru", "@yahoo.com"
    ]) and "@" not in input_string
    logger.debug(f"is_username: {input_string} -> {username_check}")
    return username_check

async def notify_admin(user_id: int, query: str, user_info: str):
    try:
        message = f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å!\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}\n–ó–∞–ø—Ä–æ—Å: {query}"
        await bot.send_message(user_id, message)
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


def create_main_menu():
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö üóÉÔ∏è")]],
        resize_keyboard=True
    )
    return keyboard



@router.message(F.text == "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö üóÉÔ∏è")
async def show_databases(message: types.Message):
    if LISTDB:
        db_list = "\n".join(LISTDB)
        await message.reply(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n{db_list}", reply_markup=create_main_menu())
    else:
        await message.reply("‚ùó –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=create_main_menu())
def find_matches_in_db(engine, search_term):
    metadata = MetaData()
    metadata.reflect(bind=engine)
    results = []

    logger.debug(f"üïµüèª –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–µ—Ä–º–∏–Ω—É: {search_term}")

    for table in metadata.sorted_tables:
        try:
            conditions = []
            for column in table.columns:
                if column.type.python_type == str:
                    conditions.append(table.c[column.name].like(f'%{search_term}%'))
            if conditions:
                query = select(table).where(or_(*conditions))
                with engine.connect() as connection:
                    result = connection.execute(query)
                    rows = result.fetchall()
                    if rows:
                        logger.debug(f"‚úîÔ∏è  –ù–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ {table.name}")
                        results.append((table.name, rows))
        except SQLAlchemyError as e:
            logger.error(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ {table.name}: {e}")

    return results

def search_all_databases(search_term):
    logger.debug(f"üïµüèª –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: {search_term}")
    databases = [f for f in os.listdir(DB_FOLDER_PATH) if f.endswith('.db')]
    
    all_matches = []
    for db in databases:
        db_path = os.path.join(DB_FOLDER_PATH, db)
        engine = create_engine(f'sqlite:///{db_path}')
        matches = find_matches_in_db(engine, search_term)
        
        if matches:
            for table_name, rows in matches:
                match_text = f"üóÇÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db}, üìÖ–¢–∞–±–ª–∏—Ü–∞: {table_name}\n"
                for row in rows:
                    row_dict = dict(row._mapping)  
                    for column, value in row_dict.items(): 
                        match_text += f"{column}‚îÉ {value}\n"
                    match_text += "\n" 
                all_matches.append(match_text)
    
    return all_matches



def phoneinfo(phone):
    try:
        logger.debug(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
        if phone.startswith('+'):
            parsed_phone = phonenumbers.parse(phone, None)
        else:
            logger.warning(f"‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
            return None
        
        if not phonenumbers.is_valid_number(parsed_phone):
            logger.warning(f"–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
            return f"–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}"
        
        carrier_info = carrier.name_for_number(parsed_phone, "ru")
        country = geocoder.description_for_number(parsed_phone, "en")
        region = geocoder.description_for_number(parsed_phone, "ru")
        location = geocoder.description_for_number(parsed_phone, "en")
        formatted_number = phonenumbers.format_number(parsed_phone, phonenumbers.PhoneNumberFormat.INTERNATIONAL)
        is_valid = phonenumbers.is_valid_number(parsed_phone)
        is_possible = phonenumbers.is_possible_number(parsed_phone)
        timezones = ', '.join(timezone.time_zones_for_number(parsed_phone))
        
        phone_info = f"""\n  [+] –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ -> {formatted_number}
    üåç [+] –°—Ç—Ä–∞–Ω–∞ -> {country}
    üìç  [+] –õ–æ–∫–∞—Ü–∏—è -> {location}
    üèôÔ∏è [+] –†–µ–≥–∏–æ–Ω -> {region}
    üíª [+] –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä -> {carrier_info}
    üü¢ [+] –ê–∫—Ç–∏–≤–µ–Ω -> {is_possible}
    ‚úÖ [+] –í–∞–ª–∏–¥ -> {is_valid}
    üïí [+] –¢–∞–π–º–∑–æ–Ω–∞ -> {timezones}
    ‚úàÔ∏è [+] Telegram -> https://t.me/{phone}
    üì≤ [+] Whatsapp -> https://wa.me/{phone}
    üìû [+] Viber -> https://viber.click/{phone}\n"""

        logger.debug(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É {phone}: {phone_info}")
        return phone_info
    except Exception as e:
        logger.error(f"‚ùó –û—à–∏–±–∫–∞ –≤ phoneinfo –¥–ª—è {phone}: {e}")
        return f"‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

async def search_usernames(username):
    urls = [
        ("–î–∏—Å–∫–ª–µ–π–º–µ—Ä ‚úß*:ÔΩ•Ôæü", f"–î–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –±—É–¥—É—Ç –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã! –ë–æ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 70%, –µ—Å–ª–∏ —Ç–∞–∫–æ–π —é–∑–µ—Ä–Ω–µ–π–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–º–æ–≥ —Ç–æ—á–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –Ω–æ —Å–æ—Ü—Å–µ—Ç–∏ —Å —Ç–∞–∫–∏–º —é–∑–µ—Ä–æ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç, –æ–Ω–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã.", "‚ùì"),
        ("Instagram", f"https://www.instagram.com/{username}", "üì∑"),
        ("TikTok", f"https://www.tiktok.com/@{username}", "üéµ"),
        ("Twitter", f"https://twitter.com/{username}", "üê¶"),
        ("Facebook", f"https://www.facebook.com/{username}", "üìò"),
        ("YouTube", f"https://www.youtube.com/@{username}", "‚ñ∂Ô∏è"),
        ("SoundCloud", f"https://soundcloud.com/{username}", "üé∂"),
        ("Telegram", f"https://t.me/{username}", "üì±"),
        ("VK", f"https://vk.com/{username}", "üîµ"),
        ("Roblox", f"https://www.roblox.com/user.aspx?username={username}", "üéÆ"),
        ("Twitch", f"https://www.twitch.tv/{username}", "üé•"),
        ("Pinterest", f"https://www.pinterest.com/{username}", "üìå"),
        ("GitHub", f"https://www.github.com/{username}", "üíª"),
        ("Reddit", f"https://www.reddit.com/u/{username}/", "‚ùì"),
        
    ]

    found_accounts = []
    logger.debug(f"–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–∏—Å–∫ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤: {username}")
    async with aiohttp.ClientSession() as session:
        tasks = [session.get(url, timeout=10) for _, url, _ in urls]
        responses = await asyncio.gather(*tasks, return_exceptions=True)

        for (resource_name, url, emoji), response in zip(urls, responses):
            if isinstance(response, aiohttp.ClientResponse) and response.status == 200:
                found_accounts.append(f"{emoji} {resource_name}: {url}")
                logger.debug(f"‚úîÔ∏è –ù–∞–π–¥–µ–Ω –∞–∫–∫–∞—É–Ω—Ç: {resource_name} -> {url}")
            else:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç: {resource_name} -> {url}")
    
    return found_accounts


async def trace_ip(target_ip):
    try:
        logger.debug(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ IP-–∞–¥—Ä–µ—Å–∞: {target_ip}")
        async with aiohttp.ClientSession() as session:
            async with session.get(f"http://ip-api.com/json/{target_ip}") as response:
                r = await response.json()
                if r['status'] == 'success':
                    return {
                        '‚úÖ –°—Ç–∞—Ç—É—Å': r['status'],
                        'üåê IP –¶–µ–ª–∏': r['query'],
                        'üè≥Ô∏è‚Äçüåà –°—Ç—Ä–∞–Ω–∞': r['country'],
                        'üî¢ –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã': r['countryCode'],
                        'üèôÔ∏è –ì–æ—Ä–æ–¥': r['city'],
                        '‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å': r['timezone'],
                        'üåç –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞': r['regionName'],
                        'üèûÔ∏è –†–µ–≥–∏–æ–Ω': r['region'],
                        'üìÆ ZIP –ö–æ–¥': r['zip'],
                        'üåç –®–∏—Ä–æ—Ç–∞': r['lat'],
                        'üåç –î–æ–ª–≥–æ—Ç–∞': r['lon'],
                        'üñ•Ô∏è ISP': r['isp'],
                        'üñ•Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä': r['org'],
                        'üì° AS': r['as'],
                        'üìç –õ–æ–∫–∞—Ü–∏—è': f"{r['lat']},{r['lon']}",
                        'üó∫Ô∏è Google –ö–∞—Ä—Ç—ã': f"https://maps.google.com/?q={r['lat']},{r['lon']}"
                    }
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ IP: {r['message']}")
                    return {
                        'Status': r['status'],
                        'Message': r['message']
                    }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ trace_ip –¥–ª—è {target_ip}: {e}")
        return {'Status': 'fail', 'Message': str(e)}
    
@router.message(Command("user"))
async def search_by_username(message: types.Message):
    try:

        command_parts = message.text.split(maxsplit=1)
        if len(command_parts) < 2:
            await message.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /user. –ü—Ä–∏–º–µ—Ä: /user john_doe")
            return

        username = command_parts[1].strip()
        usernames_info = await search_usernames(username)
        if usernames_info:
            await message.reply("\n".join(usernames_info))
        else:
            await message.reply("üõ°Ô∏è –Æ–∑–µ—Ä–Ω–µ–π–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —é–∑–µ—Ä–Ω–µ–π–º–∞: {e}")
        await message.reply("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")



async def handle_search(search_term, message):
    user_info = f"ID: {message.from_user.id}, –ò–º—è: {message.from_user.first_name}, Username: @{message.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
    logger.debug(f"–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {search_term}")
    loading_message = await message.reply("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫...")

    await notify_admin(7516159378, search_term, user_info)


    leak_osint_result = await search_leak_osint(search_term)

    if isinstance(leak_osint_result, list):  
        for chunk in leak_osint_result:
            await message.reply(f"üì° From Leak OSINT:\n{chunk}")
    else:
        await message.reply("‚ùó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Leak OSINT.")



    if is_phone_number(search_term):
        phone_info = phoneinfo(search_term)
        if phone_info:
            await message.reply(phone_info)


    elif is_ip_address(search_term):
        ip_info = await trace_ip(search_term)
        if 'Message' not in ip_info:
            ip_info_text = "\n".join([f"{key}: {value}" for key, value in ip_info.items()])
            await message.reply(ip_info_text)
        else:
            await message.reply(f"–û—à–∏–±–∫–∞: {ip_info['Message']}")


    db_matches = search_all_databases(search_term)
    if db_matches:
        for match in db_matches:
            await message.reply(match)
    else:
        await message.reply("üõ°Ô∏è –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    
@router.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.reply('''
Àñ‚Å∫‚Äß‚ÇäÀöüî≠Àö‚Çä‚Äß‚Å∫Àñ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!

–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å @theFatR4t –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è. 

üîç –í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞:
‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, +37377123456 –∏–ª–∏ 37377123456 )
                        
‚Ä¢ IP-–∞–¥—Ä–µ—Å –ù–∞–ø—Ä–∏–º–µ—Ä 62.431.76.241
‚Ä¢ –Æ–∑–µ—Ä–Ω–µ–π–º: –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ /user username.
‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: –ù–∞–ø—Ä–∏–º–µ—Ä, test@gmail.com.             
‚Ä¢ –§–ò–û: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á –∏–ª–∏ –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω.
‚Ä¢ –¢–µ—Ä–º–∏–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞.
                        
–í –±–æ—Ç–µ —Å–æ–±—Ä–∞–Ω—ã —É—Ç–µ—á–∫–∏ –ø–æ –ü–ú–†/–ú–æ–ª–¥–æ–≤–µ üá≤üá©.

–ü–æ –∫–Ω–æ–ø–∫–µ üìö –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤—Å–µ –±–∞–∑—ã.
                        ''', reply_markup=create_main_menu())

@router.message()
async def handle_message(message: types.Message):
    search_term = message.text
    await handle_search(search_term, message)

async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
